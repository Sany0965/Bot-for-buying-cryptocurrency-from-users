import threading
import time
import telebot
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, InputMediaPhoto
import config
import db
import payments

db.create_table()
bot = telebot.TeleBot(config.TELEGRAM_TOKEN, parse_mode='Markdown')

@bot.message_handler(commands=['start'])
def handle_start(message):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('üöÄ –ù–∞—á–∞—Ç—å –æ–±–º–µ–Ω', callback_data='ask_amount'))
    bot.send_message(
        message.chat.id,
        'üëã *–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!*\n–í—ã –∑–¥–µ—Å—å —á—Ç–æ–±—ã –æ–±–Ω–∞–ª–∏—á–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å.',
        reply_markup=kb
    )

@bot.message_handler(commands=['help'])
def handle_help(message):
    text = (
        '‚ÑπÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç!*\n\n'
        '–í–æ—Ç —á—Ç–æ –æ–Ω —É–º–µ–µ—Ç:\n'
        '‚Ä¢ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É *—á–µ—Ä–µ–∑ Cryptobot* (–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∏–∑ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ –∏ –æ–±–º–µ–Ω—è—Ç—å —É –Ω–∞—Å)\n'
        '‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç—É (*–∫–æ—à–µ–ª—ë–∫ YooMoney –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω*)\n'
        '‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n'
        'üìå *–ö–∞–∫ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç:*\n'
        '1. –í—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å—É–º–º—É –≤ USDT\n'
        '2. –í–≤–æ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ *YooMoney*\n'
        '3. –û–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ —Å—á—ë—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π\n'
        '4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–µ–¥—Å—Ç–≤\n'
        '5. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å" –¥–ª—è –æ—Ç–º–µ–Ω—ã\n\n'
        '‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –ß–µ–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n'
        '_–°–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ –≤—ã—à–µ_\n\n'
        'ü§ñ –ë–æ—Ç —Å–æ–∑–¥–∞–Ω: @worpli'
    )
    media_group = [
        InputMediaPhoto(open('1.jpg', 'rb'), caption=text, parse_mode='Markdown'),
        InputMediaPhoto(open('2.jpg', 'rb'))
    ]
    bot.send_media_group(message.chat.id, media_group)

@bot.callback_query_handler(func=lambda call: call.data == 'ask_amount')
def ask_amount(call):
    bot.send_message(call.message.chat.id, 'üí∞ *–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É* _USDT_ –¥–ª—è –æ–±–º–µ–Ω–∞ (–º–∏–Ω–∏–º—É–º 0.1 USDT):')
    bot.register_next_step_handler_by_chat_id(call.message.chat.id, process_amount)

def process_amount(message):
    chat_id = message.chat.id
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < 0.1:
            raise ValueError()
    except:
        bot.send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:')
        bot.register_next_step_handler_by_chat_id(chat_id, process_amount)
        return
    db.save_amount(chat_id, amount)
    bot.send_message(chat_id, 'üìû *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ YooMoney* –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–Ω–µ–≥:')
    bot.register_next_step_handler_by_chat_id(chat_id, process_phone)

def process_phone(message):
    chat_id = message.chat.id
    phone = message.text.strip().replace(" ", "")  
    
    
    error_msg = None
    if not phone.isdigit():
        error_msg = "‚ùå –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
    elif len(phone) != 16:
        error_msg = "‚ùå –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä"
    elif not phone.startswith('4100'):
        error_msg = "‚ùå –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 4100"
    
    if error_msg:
        bot.send_message(chat_id, f"{error_msg}!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler_by_chat_id(chat_id, process_phone)
        return
    
    db.save_phone(chat_id, phone)
    data = db.get_user(chat_id)
    amount = data[1]
    pay_url, invoice_id = payments.create_invoice(amount)
    db.save_invoice(chat_id, invoice_id)
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å—á—ë—Ç', url=pay_url))
    msg = bot.send_message(chat_id, f'üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É *{amount:.2f} USDT*:\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup=kb)
    db.save_msg_id(chat_id, msg.message_id)
    threading.Thread(target=wait_for_payment, args=(chat_id,)).start()

def wait_for_payment(chat_id):
    invoice_id = db.get_user(chat_id)[3]
    while True:
        status = payments.check_invoice_paid(invoice_id)
        print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status}")
        if status == 'paid':
            try:
                msg_id = db.get_user(chat_id)[8]
                bot.delete_message(chat_id, msg_id)
            except:
                pass
            send_result_by_chat_id(chat_id)
            break
        time.sleep(2)

def send_result_by_chat_id(chat_id):
    data = db.get_user(chat_id)
    amount = data[1]
    phone = data[2]
    rate = payments.get_usdt_to_rub_rate()
    rub = amount * rate
    commission = rub * 0.05
    total = rub - commission
    db.save_final(chat_id, rate, rub, commission, total)

    text = (
        'üìä *–î–∞–Ω–Ω—ã–µ –æ–±–º–µ–Ω–∞:*\n'
        f'‚Ä¢ –í—ã –º–µ–Ω—è–µ—Ç–µ: *{amount:.2f} USDT*\n'
        f'‚Ä¢ –ö—É—Ä—Å: *{rate:.2f} RUB/USDT*\n'
        f'‚Ä¢ –ü–æ–ª—É—á–∞–µ—Ç–µ –¥–æ –∫–æ–º–∏—Å—Å–∏–∏: *{rub:.2f} ‚ÇΩ*\n'
        f'‚Ä¢ –ö–æ–º–∏—Å—Å–∏—è (5%): *{commission:.2f} ‚ÇΩ*\n'
        f'‚Ä¢ –ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ:(–Ω–µ —Å—á–∏—Ç–∞—è –∫–æ–º–∏—Å—Å–∏–∏ yoomoney) *{total:.2f} ‚ÇΩ*\n\n'
        'üì± *–†–µ–∫–≤–∏–∑–∏—Ç—ã:*\n'
        f'–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: *{phone}*\n\n'
        '–í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ä–µ–¥—Å—Ç–≤?–î–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç'
    )
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton('‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data='confirm_send'),
        InlineKeyboardButton('‚ùå –ù–µ—Ç, –≤–µ—Ä–Ω—É—Ç—å', callback_data='cancel_send')
    )
    msg = bot.send_message(chat_id, text, reply_markup=kb)
    time.sleep(300)
    try:
        bot.delete_message(chat_id, msg.message_id)
    except:
        pass

@bot.callback_query_handler(func=lambda call: call.data == 'confirm_send')
def confirm_and_send(call):
    chat_id = call.message.chat.id
    data = db.get_user(chat_id)
    phone = data[2]
    total_rub = data[7]
    payments.send_yoomoney_payment(phone, total_rub, '–û–±–º–µ–Ω –∫—Ä–∏–ø—Ç—ã –±–æ—Ç')
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass
    bot.send_message(chat_id, 'üéâ *–î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!*\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ë–æ—Ç —Å–æ–∑–¥–∞–ª https://t.me/worpli')

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_send')
def handle_cancel_send(call):
    chat_id = call.message.chat.id
    data = db.get_user(chat_id)
    amount = data[1]
    
    try:
        check_response = payments.create_crypto_check(chat_id, amount)
        
        if check_response and check_response.get('result'):
            bot.send_message(
                chat_id,
                f"‚ôªÔ∏è *–í–æ–∑–≤—Ä–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
                f"–ß–µ–∫ –Ω–∞ *{amount:.2f} USDT*:\n"
                f"{check_response['result']['bot_check_url']}\n\n"
                "–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞."
            )
            db.delete_user(chat_id)
        else:
            error = check_response.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if check_response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API'
            bot.send_message(
                chat_id,
                f"‚ùå *–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞*: {error}\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @support"
            )
            
    except Exception as e:
        bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        print(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {str(e)}")
    
    try:
        bot.delete_message(chat_id, call.message.message_id)
    except:
        pass

if __name__ == '__main__':
    bot.polling(none_stop=True)